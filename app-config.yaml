app:
  title: Backstage Loja Santo Antonio
  baseUrl: http://localhost:3000

organization:
  name: Loja Santo Antonio

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to all IPv4 interfaces and
    # not just the baseUrl hostname.
    # host: 0.0.0.0
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
    # config options: https://node-postgres.com/api/client
    # client: pg
    # connection:
    #   host: ${POSTGRES_HOST}     ####### Postgres BD #######
    #   port: ${POSTGRES_PORT}
    #   user: admin
    #   password: admin
      # https://node-postgres.com/features/ssl
      #ssl: require # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      #ca: # if you have a CA file and want to verify it you can uncomment this section
      #$file: <file-path>/ca/server.crt
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  '/test':
    target: 'https://example.com'
    changeOrigin: true

  '/circleci/api':
    target: https://circleci.com/api/v1.1
    headers:
      Circle-Token: ${CIRCLECI_AUTH_TOKEN}

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
# techdocs:
#   builder: 'local' # Alternatives - 'external'
#   generator:
#     runIn: 'docker' # Alternatives - 'local'
#   publisher:
#     type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.



techdocs:
  builder: 'local' # Alternatives - 'external'
  generators:
    techdocs: 'local' # Alternatives - 'docker'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3' or 'azureBlobStorage' or 'openStackSwift'. Read documentation for using alternatives.




# techdocs:
#   # techdocs.generator is used to configure how documentation sites are generated using MkDocs.

#   generator:
#     # techdocs.generator.runIn can be either 'docker' or 'local'. This is to determine how to run the generator - whether to
#     # spin up the techdocs-container docker image or to run mkdocs locally (assuming all the dependencies are taken care of).
#     # You want to change this to 'local' if you are running Backstage using your own custom Docker setup and want to avoid running
#     # into Docker in Docker situation. Read more here
#     # https://backstage.io/docs/features/techdocs/getting-started#disable-docker-in-docker-situation-optional

#     runIn: 'local'

#     # (Optional) techdocs.generator.dockerImage can be used to control the docker image used during documentation generation. This can be useful
#     # if you want to use MkDocs plugins or other packages that are not included in the default techdocs-container (spotify/techdocs).
#     # NOTE: This setting is only used when techdocs.generator.runIn is set to 'docker'.

#     dockerImage: 'spotify/techdocs'

#     # (Optional) techdocs.generator.pullImage can be used to disable pulling the latest docker image by default. This can be useful when you are
#     # using a custom techdocs.generator.dockerImage and you have a custom docker login requirement. For example, you need to login to
#     # AWS ECR to pull the docker image.
#     # NOTE: Disabling this requires the docker image was pulled by other means before running the techdocs generator.

#     pullImage: true

#     mkdocs:
#       # (Optional)  techdocs.generator.omitTechdocsCoreMkdocsPlugin can be used to disable automatic addition of techdocs-core plugin to the mkdocs.yaml files.
#       # Defaults to false, which means that the techdocs-core plugin is always added to the mkdocs file.
#       omitTechdocsCorePlugin: false

#       # (Optional and not recommended) Configures the techdocs generator to
#       # attempt to ensure an index.md exists falling back to using <docs-dir>/README.md
#       # or README.md in case a default <docs-dir>/index.md is not provided.
#       # Note that https://www.mkdocs.org/user-guide/configuration/#edit_uri behavior
#       # will be broken in these scenarios.
#       legacyCopyReadmeMdToIndexMd: false

#   # techdocs.builder can be either 'local' or 'external.
#   # Using the default build strategy, if builder is set to 'local' and you open a TechDocs page,
#   # techdocs-backend will try to generate the docs, publish to storage and show the generated docs afterwords.
#   # This is the "Basic" setup of the TechDocs Architecture.
#   # Using the default build strategy, if builder is set to 'external' (or anything other than 'local'), techdocs-backend
#   # will only fetch the docs and will NOT try to generate and publish.
#   # In this case, we assume that docs are being built by an external process (e.g. in the CI/CD pipeline of the repository).
#   # This is the "Recommended" setup of the architecture.
#   # Note that custom build strategies may alter this behaviour.
#   # Read more about the "Basic" and "Recommended" setups here https://backstage.io/docs/features/techdocs/architecture
#   # Read more about build strategies here: https://backstage.io/docs/features/techdocs/concepts#techdocs-build-strategy

#   builder: 'local'

#   # techdocs.publisher is used to configure the Storage option, whether you want to use the local filesystem to store generated docs
#   # or you want to use External storage providers like Google Cloud Storage, AWS S3, etc.

#   publisher:
#     # techdocs.publisher.type can be - 'local' or 'googleGcs' or 'awsS3' or 'azureBlobStorage'.
#     # When set to 'local', techdocs-backend will create a 'static' directory at its root to store generated documentation files.
#     # When set to 'googleGcs', techdocs-backend will use a Google Cloud Storage Bucket to store generated documentation files.
#     # When set to 'awsS3', techdocs-backend will use an Amazon Web Service (AWS) S3 bucket to store generated documentation files.

#     type: 'googleGcs'

#     # Optional when techdocs.publisher.type is set to 'local'.

#     local:
#       # (Optional). Set this to specify where the generated documentation is stored.
#       publishDirectory: '/d/Usu√°rio/Desktop/my-backstage/my-backstage-app/docs'

#     # Required when techdocs.publisher.type is set to 'googleGcs'. Skip otherwise.

#     googleGcs:
#       # (Required) Cloud Storage Bucket Name
#       bucketName: 'LojaSantoAntonio-techdocs-storage'

#       # (Optional) Location in storage bucket to save files
#       # If not set, the default location will be the root of the storage bucket
#       bucketRootPath: '/'

#       # (Optional) An API key is required to write to a storage bucket.
#       # If missing, GOOGLE_APPLICATION_CREDENTIALS environment variable will be used.
#       # https://cloud.google.com/docs/authentication/production
#       credentials:
#         $file: ${GOOGLE_APPLICATION_CREDENTIALS}

#     # Required when techdocs.publisher.type is set to 'awsS3'. Skip otherwise.

#     awsS3:
#       # (Required) AWS S3 Bucket Name
#       bucketName: 'techdocs-storage'

#       # (Optional) Location in storage bucket to save files
#       # If not set, the default location will be the root of the storage bucket
#       bucketRootPath: '/'

#       # (Optional) An API key is required to write to a storage bucket.
#       # If not set, environment variables or aws config file will be used to authenticate.
#       # https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/loading-node-credentials-environment.html
#       # https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/loading-node-credentials-shared.html
#       credentials:
#         accessKeyId: ${TECHDOCS_AWSS3_ACCESS_KEY_ID_CREDENTIAL}
#         secretAccessKey: ${TECHDOCS_AWSS3_SECRET_ACCESS_KEY_CREDENTIAL}

#       # (Optional) AWS Region of the bucket.
#       # If not set, AWS_REGION environment variable or aws config file will be used.
#       # https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/setting-region.html
#       region: ${AWS_REGION}

#       # (Optional) Endpoint URI to send requests to.
#       # If not set, the default endpoint is built from the configured region.
#       # https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#constructor-property
#       endpoint: ${AWS_ENDPOINT}

#       # (Optional) Whether to use path style URLs when communicating with S3.
#       # Defaults to false.
#       # This allows providers like LocalStack, Minio and Wasabi (and possibly others) to be used to host tech docs.
#       s3ForcePathStyle: false

#       # (Optional) AWS Server Side Encryption
#       # Defaults to undefined.
#       # If not set, encrypted buckets will fail to publish.
#       # https://docs.aws.amazon.com/AmazonS3/latest/userguide/specifying-s3-encryption.html
#       sse: 'aws:kms' # or AES256

#     # Required when techdocs.publisher.type is set to 'azureBlobStorage'. Skip otherwise.

#     azureBlobStorage:
#       # (Required) Azure Blob Storage Container Name
#       containerName: 'techdocs-storage'

#       # (Required) An account name is required to write to a storage blob container.
#       # https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-with-shared-key
#       credentials:
#         accountName: ${TECHDOCS_AZURE_BLOB_STORAGE_ACCOUNT_NAME}
#         # (Optional) An account key is required to write to a storage container.
#         # If missing,AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET environment variable will be used.
#         # https://docs.microsoft.com/en-us/azure/storage/common/storage-auth?toc=/azure/storage/blobs/toc.json
#         accountKey: ${TECHDOCS_AZURE_BLOB_STORAGE_ACCOUNT_KEY}

#   # (Optional and not recommended) Prior to version [0.x.y] of TechDocs, docs
#   # sites could only be accessed over paths with case-sensitive entity triplets
#   # e.g. (namespace/Kind/name). If you are upgrading from an older version of
#   # TechDocs and are unable to perform the necessary migration of files in your
#   # external storage, you can set this value to `true` to temporarily revert to
#   # the old, case-sensitive entity triplet behavior.
#   legacyUseCaseSensitiveTripletPaths: false

#   # techdocs.cache is optional, and is only recommended when you've configured
#   # an external techdocs.publisher.type above. Also requires backend.cache to
#   # be configured with a valid cache store. Configure techdocs.cache.ttl to
#   # enable caching of techdocs assets.
#   cache:
#     # Represents the number of milliseconds a statically built asset should
#     # stay cached. Cache invalidation is handled automatically by the frontend,
#     # which compares the build times in cached metadata vs. canonical storage,
#     # allowing long TTLs (e.g. 1 month/year)
#     ttl: 3600000

#     # (Optional) The time (in milliseconds) that the TechDocs backend will wait
#     # for a cache service to respond before continuing on as though the cached
#     # object was not found (e.g. when the cache sercice is unavailable). The
#     # default value is 1000
#     readTimeout: 500


auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    {
      github:
        {
          development:
            {
              clientId: '3103cab5645551c2cc62',
              clientSecret: '2ec29df0ad16058f395a9584fb6d3f0c35afb33b',
            },
        },
    }

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    - type: url
      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
      rules:
        - allow: [User, Group]

    ## Uncomment these lines to add more example
    - type: url
      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/react-ssr-template/template.yaml
      rules:
        - allow: [Template]

    ## Uncomment these lines to add more example
    - type: url
      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/springboot-grpc-template/template.yaml
      rules:
        - allow: [Template]

    ## Uncomment these lines to add more example
    - type: url
      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/docs-template/template.yaml
      rules:
        - allow: [Template]

    ## Uncomment these lines to add more example to create app
    - type: url
      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/create-react-app/template.yaml
      rules:
        - allow: [Template]


    - type: url
      target: https://github.com/backstage/backstage/blob/master/plugins/techdocs-backend/examples/documented-component/catalog-info.yaml
      rules:
        - allow: [Template]